<?php


class FieldtypeCroppableImage extends FieldtypeImage implements ConfigurableModule {


    const ciVersion = 84;



    /**
     * Default settings used by this module
     *
     * @return array
     */
    static public function getDefaultData() {
        return array(
            'manualSelectionDisabled' => '0',
            'optionQuality' => 90,
            'optionSharpening' => 'soft'
            );
    }



    public function __construct() {
        parent::__construct();
        $this->defaultInputfieldClass = 'InputfieldCroppableImage';
        require_once(dirname(__FILE__) . '/../classes/CroppableImageKeepCoords.class.php');
        require_once(dirname(__FILE__) . '/../classes/CroppableImageHelpers.class.php');
        require_once(dirname(__FILE__) . '/../classes/CroppableImageCropSettings.class.php');
    }



    public function init() {
        parent::init();

        // synchronize quality-Inputfields (integer vs slider)
        if (isset($this->data['optionQuality']) || isset($this->data['optionQualitySlider']['min'])) {
            $data = wire('modules')->getModuleConfigData(__CLASS__);
            $hasSlider = wire('modules')->isInstalled('InputfieldRangeSlider');
            if ($hasSlider && isset($data['optionQualitySlider']['min']) && $data['optionQualitySlider']['min'] != $data['optionQuality']) {
                $data['optionQuality'] = $data['optionQualitySlider']['min'];
            } else {
                $data['optionQualitySlider']['min'] = $data['optionQuality'];
            }
            CroppableImageHelpers::writeModuleConfigData(__CLASS__, $data);
            unset($data);
        }

        // add a new method to pageimages to retrieve a cropped variation as pageimage object
        $this->addHook('Pageimage::getCrop', $this, 'getCrop');
        $this->addHook('Pageimage::getCropSettings', $this, 'getCropSettings');

        // validates CropSettings
        // and tracks if previously used settings are removed, and if so, raises cleaning routines
        $this->addHookBefore('InputField::processInput', $this, 'HookValidateSettingsInput');
    }



    // this does not only validate settings, it also raises cleaning routines
    // if a user has previously used settings deleted or changed
    public function HookValidateSettingsInput(HookEvent $event) {

        $input = $event->object;

        if (!($args = $event->arguments[0])) return;
        if (!($input->name === 'cropSetting' && $args->type === 'FieldtypeCroppableImage')) return;

        // get the old settings
        $oldSettings = new CroppableImageCropSettings($this->fields->get($args->id)->cropSetting);

        // get the new settings
        $cropSettings = new CroppableImageCropSettings($args->cropSetting);

        // compare to detect changes
        $changes = ($oldSettings != $cropSettings) ? true : false;

        // check if any of the lines are invalid
        $valid = true;
        if (count($cropSettings->invalidLines) > 0) {
            $valid = false;
            foreach ($cropSettings->invalidLines as $invalidLine) {
                $this->error(sprintf($this->_("Crop Settings: This line is not a valid crop setting: '%s'"), $invalidLine));
            }
        }

        // check if given templates exist, throw a warning if any of them don't
        $invalidTemplates = array();
        foreach ($cropSettings->templateNames as $templateName) {
            $template = $this->templates->get($templateName);
            if (!$template) {
                $invalidTemplates[] = $templateName;
            }
        }
        if (count($invalidTemplates) > 0) {
            $this->warning(sprintf(
                $this->_("Crop Settings: The following templates have not been found: '%s'"),
                implode("', '", $invalidTemplates)
            ));
        }

        // check for duplicates
        foreach ($cropSettings->duplicates as $name => $duplicate) {
            $valid = false;
            $this->error(sprintf($this->_("Crop setting names must be unique, '%s' is already defined: '%s'"), $name, $duplicate));
        }

        // if a user has made invalid changes, we drop new settings and 'restore' the previously used
        if ($changes && !$valid) {
            // we cannot cleanup variations according to invalid settings!
            // Restore the previous one and return;
            $event->return = $this->fields->get($args->id)->cropSetting;
            $event->replace = true;
            $this->error($this->_("Because of invalid Crop-Settings that may result in unwanted removal of variations, we restore the previously used settings now!"));
            return;
        }

        // if there are changes and the new settings are valid, we inspect which changes should be made and act upon it
        if ($valid && $changes) {
            $removed = $changed = array();
            foreach($oldSettings->items as $k => $v) {
                // removed ?
                if (!isset($cropSettings->items[$k])) {
                    $removed[$k] = $v;
                    continue;
                }
                // changed ?
                if ($cropSettings->items[$k] != $oldSettings->items[$k]) {
                    $changed[$k] = array('from'=>$v, 'to'=>$cropSettings->items[$k]);
                    continue;
                }
            }
            // here we will remove all variations that belongs to $removed cropname and check which we have to delete from $changed
            $this->cleaningRoutine($this->fields->get($args->id), $this->fields->get($args->id)->cropSetting, $args->cropSetting, $removed, $changed);
        }

        return;
    }

    /**
     * getCropSettings
     *
     * CroppableImage Needs a way to get crop images sizes from the
     * ProcessWire API. The largest usecase for this is when
     * JSON encoding $page data, along with CroppableImage images variations.
     *
     * Example of how to use in JSON pages Module:
     *
     * ...
     *  if ($field->type instanceOf FieldtypeCroppableImage ){
     *       $cropSettings = $image->getCropSettings();
     *       foreach($cropSettings as $setting){
     *           $cropImage = $image->getCrop($setting->name);
     *           $ret[$field->name][$i]['crops'][$setting->name]['width'] = $setting->width;
     *           $ret[$field->name][$i]['crops'][$setting->name]['height'] = $setting->height;
     *           $ret[$field->name][$i]['crops'][$setting->name]['url'] = $cropImage->url;
     *       }
     *  }
     *  ...
     *
     * @param HookEvent $event
     * @return bool
     */
    public function getCropSettings(HookEvent $event) {
        $inputFieldInstance = $this->_getInputFieldInstance($event);
        $cropSettings = new CroppableImageCropSettings($inputFieldInstance->cropSetting);
        $sets =  $cropSettings->getCropSettingsForTemplate($event->object->page->template);
        $event->return = $sets;
        return true;
    }


    // until now, (02.11.2014), getCrop() isn't affected by option "forceNew" in regard of the suffix-crop
    public function getCrop(HookEvent $event) {

        // get the suffix (cropname)
        $suffix = $this->sanitizer->name($event->arguments(0));
        // check if we have a second argument with this call,
        // if we have one it should be a selector string, so push it through the typecaster
        $second = CroppableImageHelpers::typeCaster(
            array(
                'int' => array('width', 'height', 'quality'),
                //'float' => array('defaultGamma'),
                'bool' => array('upscaling', 'cropping', 'forceNew', 'useUSM', 'useGD', 'autoRotation', 'keepICC', 'keepXMP', 'keepEXIF'),
                'str' => array('sharpening', 'suffix')
                ),
            CroppableImageHelpers::selector2array($this->sanitizer->text($event->arguments(1))));
        // if we have a second param, we need to create an intermediate image first
        $intermediate = $second ? true : false;

        // return InputfieldCroppableImage or null if not found
        $inputFieldInstance = $this->_getInputFieldInstance($event);

        if (!$inputFieldInstance) return true;

        // and we continue...

        // get the template name
        $templateName = $event->object->page->template->name;
        $cropSettings = new CroppableImageCropSettings($inputFieldInstance->cropSetting);

        // check if the cropname is valid for this template
        if ($cropSetting = $cropSettings->getCropSetting($suffix, $templateName)) {
// TODO 4 -c errorhandling :we need to check for: is-to-small
            $this->w = $cropSetting->width;
            $this->h = $cropSetting->height;
        } else {
            throw new WireException(sprintf(
                $this->_("There is no crop setting for the template '%s' called '%s'"),
                $templateName,
                $suffix
            ));
            return;
        }

        if ($this->w < 1 && $this->h < 1) {
            throw new WireException(sprintf($this->_("Width and height not found for crop setting '%s'"), $thumb));
            return;
        }

        // use new naming-convention of PW 2.5 for the CropVariationName
        $img = $event->object;
        $basename = basename($img->basename, '.' . $img->ext) . ".-$suffix" . "." . $img->ext;
        $imgPath = $img->pagefiles->path() . $basename;
        $imgUrl = $img->pagefiles->url() . $basename;

        // check if we have valid data to create an intermediate image
        if ($intermediate && ((isset($second['width']) && 0<$second['width']) || (isset($second['height']) && 0<$second['height']))) { // recalculate the CropVariationName
            // merge options
            $width = $second['width'] = isset($second['width']) ? $second['width'] : 0;
            $height = $second['height'] = isset($second['height']) ? $second['height'] : 0;
            if (isset($second['suffix'])) {
                $second['suffix'] = is_array($second['suffix']) ? array_merge($second['suffix'], array($suffix)) : array($suffix, $second['suffix']);
            } else {
                $second['suffix'] = array($suffix);
            }
            $defaultOptions = ProcessCroppableImage::getCroppableImageOptions();
            $secondOptions = array_merge($defaultOptions, $second);
            // validation
            $crop = ImageSizer::croppingValueStr($secondOptions['cropping']);
            $secondOptions['quality'] = isset($secondOptions['quality']) && is_numeric($secondOptions['quality']) && 0<intval($secondOptions['quality']) && 101>intval($secondOptions['quality']) ? intval($secondOptions['quality']) : $defaultOptions['quality'];
            $secondOptions['sharpening'] = ImageSizer::sharpeningValueStr($secondOptions['sharpening'])==$secondOptions['sharpening'] ? $secondOptions['sharpening'] : $defaultOptions['sharpening'];
            $suffixStr = '';
            if(!empty($secondOptions['suffix'])) {
                $secondSuffix = is_array($secondOptions['suffix']) ? $secondOptions['suffix'] : array($secondOptions['suffix']);
                sort($secondSuffix);
                foreach($secondSuffix as $key => $s) {
                    $s = strtolower($this->wire('sanitizer')->fieldName($s));
                    if(empty($s)) unset($suffix[$key]);
                        else $suffix[$key] = $s;
                }
                if(count($secondSuffix)) $suffixStr = '-' . implode('-', $secondSuffix);
            }
            // build name
            $basename = basename($img->basename, '.' . $img->ext);
            $basename .= '.' . $width . 'x' . $height . $crop . $suffixStr . "." . $img->ext;
            $imgPath = $img->pagefiles->path() . $basename;
            $imgUrl = $img->pagefiles->url() . $basename;
        } else {
            $intermediate = false;
        }

        // do we have a file?
        if ($isReady = (true == is_file($imgPath))) {
            // make it a Pageimage-Object
            $pageimage = clone $img;
            $pageimage->setFilename($imgPath);
            $pageimage->setOriginal($img);
            // does it match the final dimensions?
            if ($intermediate) {
                if ($width > 0 && $pageimage->width() != $width) $isReady = false;
                if ($height > 0 && $pageimage->height() != $height) $isReady = false;
            } else {
                $isReady = ($pageimage->width() == $this->w && $pageimage->height() == $this->h);
            }
        }

        // if the file do not match the final dimensions or if we have to render a followup variation, we do it now
        if (!$isReady || ($intermediate && isset($secondOptions['forceNew']) && true == $secondOptions['forceNew'])) {
            $x1 = $y1 = $w = $h = 0;
            $options = ProcessCroppableImage::getCroppableImageOptions();
            $quality = $intermediate ? 100 : $options['quality'];
            $sharpening = $intermediate ? 'soft' : $options['sharpening'];
            $cikk = new CroppableImageKeepCoords();
            if ($cikk->readSuffix($img, $suffix, $x1, $y1, $w, $h, $quality, $sharpening)) {
                // we got values from session or IPTC, now add them to the options after successful validation
                $options['quality'] = is_integer($quality) && 0 < $quality && 101 > $quality ? $quality : $options['quality'];
                $options['sharpening'] = ImageSizer::sharpeningValueStr($sharpening) == $sharpening ? $sharpening : $options['sharpening'];
            }
            unset($cikk);
            $imOptions = array_merge($options,
                array(
                    'forceNew'   => true,
                    'quality'    => $intermediate ? 100 : $quality,
                    'sharpening' => $intermediate ? 'soft' : $sharpening
                    )
            );
            if ($w>0 && $h>0) $imOptions['cropExtra'] = array($x1, $y1, $w, $h);
            // here we render the cropImage if it does not exist, if it does not match the final dimensions or if we have to create a following variation from it
            $pageimage = CroppableImageHelpers::renderImage($this, $img, $img->pagefiles->path . $img->basename, $imgPath, $this->w, $this->h, $imOptions);
            if ($intermediate) {
                // create the final variation, based on the cropImage
                $intermediateFile = pathinfo($imgPath, PATHINFO_DIRNAME) . '/intermediate_' . pathinfo($imgPath, PATHINFO_BASENAME);
                rename($imgPath, $intermediateFile);
                // this uses the same process as core pageimage does
                $pageimage = CroppableImageHelpers::renderImage($this, $img, $intermediateFile, $imgPath, $width, $height, $secondOptions);
                if (file_exists($intermediateFile)) @unlink($intermediateFile);
            }
        }

        // and finally we return the new pageimage
        $event->return = $pageimage;

        return true;
    }



    public function _getInputFieldInstance(HookEvent $event) {

        $field = null; // where we'll keep the field we're looking for
        $image = $event->object;
        $page = $image->page;
        $action = $event->arguments[0];

        // find all fields of type FieldtypeImage that are part of the page we're using
        // or regular image fields with InputfieldImage inputfield assigned
        $imageFields = array();
        foreach($page->fields as $f) {
            if ($f->type instanceof FieldtypeCroppableImage || ($f->inputfieldClass && $f->inputfieldClass == 'InputfieldCroppableImage')) {
                $imageFields[] = $f;
            }
        }

        // loop through to find the one we're looking for
        foreach($imageFields as $imageField) {

            // good to get unformatted in case it's a single image field,
            // because it'll still be an array rather than 1 image
            $pagefiles = $page->getUnformatted($imageField->name);          // TODO: name to lowercase ???

            // if the image's pagefiles property matches the one with the
            // field we're looking at, we have a match. save in $field
            if ($image->pagefiles === $pagefiles) {
                $field = $imageField->getInputfield($page);
                break;
            }
        }

        if ($field) {
            //$event->return = $out;
            return $field;
        }

        return null;
    }




    // remove useless variations after a CropSetting has changed
    private function cleaningRoutine($field, $old, $new, $removed, $changed) {
        #$collection = array();

        $cikc = new CroppableImageKeepCoords();
        $cics = new CroppableImageCropSettings($old);

        $TABLE = 'field_' . strtolower($field->name);  // TODO: name to lowercase ??? @noodles: Yes! ;-)  (https://processwire.com/talk/topic/8709-croppableimage/page-4#entry93416)
        $r = wire('db')->query("SELECT pages_id,count(pages_id) FROM $TABLE GROUP BY pages_id ORDER BY pages_id");
        // TODO: use database (pdo) instead of db (mysqli)

        while($row = $r->fetch_row()) {

            set_time_limit(30);                                                     // reset time limit
            $page = $this->pages->get('id=' . $row[0]);                             // get a page
            if (0==$page->id) continue;                                             // check page is valid

                foreach($removed as $suffix => $v) {                                        // check a removed one
                    $cropsetting = $cics->getCropSetting($suffix);                          // get a removed cropsetting
                    if (!$cropsetting->isTemplateAllowed($page->template->name)) continue;  // continue if the page template does not match
                    foreach($page->get($field->name) as $image) {    // TODO: name to lowercase ???                         // get a pageimage
                        $cikc->dropSuffix($image, $suffix);                                 // remove these settings from permanent storage
                        foreach($image->getVariations() as $i) {                            // get variations of that pageimage
                            if (null==$i->suffix($suffix)) continue;                        // check if a variationname has the current suffix
                            #$collection[$i->filename] = $i->filename;                      // if yes, collect it / unlink it
                            @unlink($i->filename);
                        }
                    }
                }
                foreach($changed as $suffix => $a) {                                        // check a changed one
                    $cso = $a['from'];                                                      // cropsettings old
                    $csn = $a['to'];                                                        // cropsettings new
                    if ( ($cso->isTemplateAllowed($page->template->name) &&                 //
                          !$csn->isTemplateAllowed($page->template->name)) ||               // continue if the actually page-template isn't allowed anymore
                         ($cso->width != $csn->width) ||                                    // or continue if the new width doesn't match the old width
                         ($cso->height != $csn->height) ) {                                 // or continue if the new height doesn't match the old height
                        foreach($page->get($field->name) as $image) {   // TODO: name to lowercase ???                      // get a pageimage
                            $cikc->dropSuffix($image, $suffix);                             // remove these settings from permanent storage
                            foreach($image->getVariations() as $i) {                        // get variations of the pageimage
                                if (null==$i->suffix($suffix)) continue;                    // check if a variationname has the current suffix
                                #$collection[$i->filename] = $i->filename;                  // if yes, collect it / unlink it
                                @unlink($i->filename);
                            }
                        }
                    }
                }
            #$this->pages->uncacheAll();
            $this->pages->uncache($page);                                                   // uncache used page
        }

        return;
    }


    /**
     * Build a form allowing configuration of this Module
     */
    static public function getModuleConfigInputfields(array $data) {
        $data = array_merge(self::getDefaultData(), $data);
        require_once(dirname(__FILE__) . '/FieldtypeCroppableImageConfAdaptor.php');
        $c = new FieldtypeCroppableImageConfAdaptor();
        return $c->getConfig($data);
    }



    public function install() {
        parent::___install();
    }



    public function ___uninstall() {
        $GLOBALS['UNINSTALLROUTINE_RUNNING_CROPPABLEIMAGE'] = array();
        foreach(array('ProcessCroppableImage', 'InputfieldCroppableImage') as $mod) {
            $this->modules->resetCache();
            if (!$this->modules->isInstalled($mod)) continue;
            $GLOBALS['UNINSTALLROUTINE_RUNNING_CROPPABLEIMAGE'][$mod] = $mod;
            $m = $this->modules->get($mod);
            $m->uninstall();
        }
        parent::___uninstall();
    }

}
